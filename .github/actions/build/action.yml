name: 'Build'
description: 'Build MetGem and returns produced asset name and mimetype'
inputs:
  nightly:
    description: "Whether the build is nightly build"
    required: false
    default: 'false'
  certificate:
    description: "Certificate to sign code"
    required: false
    default: ''
  certificate_pwd:
    description: "Password for certificate"
    required: false
    default: ''
  identity_id:
    description: "Identity for code signing"
    required: false
    default: ''
outputs:
  version:
    description: "Version of built program"
    value: ${{ steps.version.outputs.version }}
  tag:
    description: "Tag of built version"
    value: ${{ steps.version.outputs.tag }}
  sha-short:
    description: "Git commit short sha of built version"
    value: ${{ steps.version.outputs.sha-short }}
  sha:
    description: "Git commit sha of built version"
    value: ${{ steps.version.outputs.sha }}
  asset-name: 
    description: "Name of produced asset"
    value: ${{ steps.build.outputs.asset-name }}
  asset-mimetype:
    description: "MimeType of produced asset"
    value: ${{ steps.build.outputs.asset-mimetype }}
  asset-ext:
    description: "Extension of produced asset"
    value: ${{ steps.build.outputs.asset-ext }}
  asset-basename:
    description: "Name of produced asset without extension"
    value: ${{ steps.build.outputs.asset-basename }}
runs:
  using: "composite"
  steps:
    - name: Get version
      shell: bash -l {0}
      id: version
      run: |
        pushd metgem
        version=`python -c "import versioneer; print(versioneer.get_version())" |  cut -d "+" -f 1`
        sha_short=`git rev-parse --short HEAD`
        sha=`git rev-parse HEAD`
        popd
        echo "version=${version}" >> $GITHUB_OUTPUT
        echo "tag=v${version}" >> $GITHUB_OUTPUT
        echo "sha-sort=${sha_short}" >> $GITHUB_OUTPUT
        echo "sha=${sha}" >> $GITHUB_OUTPUT
    - name: Codesign
      shell: bash -l {0}
      if: runner.os == 'macOS'
      run: |
        if [ "${{ inputs.certificate }}" != "" ] && [ "${{ inputs.certificate_pwd }}" != "" ]; then
          key_chain_pwd=`openssl rand -base64 12`
          echo ${{ inputs.certificate }} | base64 -decode -o certificate.p12
          security create-keychain -p $key_chain_pwd build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p $key_chain_pwd build.keychain
          security import certificate.p12 -k build.keychain -P $ {{ inputs.certificate_pwd }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $key_chain_pwd build.keychain
        fi
    - name: Build
      shell: bash -l {0}
      id: build
      run: |
        if [ "${{ inputs.identity_id }}" != "" ] && [ "${{ runner.os }}" == "macOS" ]; then
          python -m invoke build --certificate="${{ inputs.identity_id }}"
        else
          python -m invoke build
        fi
        shopt -s extglob
        asset_name=`find . -maxdepth 1 \( -name "setup_MetGem*" -or -name "MetGem*.dmg" -or -name "MetGem*.AppImage" \) -print0 | xargs -0 ls -t | head -n 1 | xargs -n 1 basename`
        asset_basename=${asset_name%.*}
        asset_ext=${asset_name#*.}
        asset_mimetype=`file -b --mime-type $asset_name`
        if [ "${{ inputs.nightly }}" == "true" ]; then
          asset_outputname="$asset_basename-${{ steps.version.outputs.sha-short }}.$asset_ext"
        else
          asset_outputname="$asset_basename-${{ steps.version.outputs.tag }}.$asset_ext"
        fi
        
        mv $asset_name $asset_outputname
        
        echo "asset-name=$asset_outputname" >> $GITHUB_OUTPUT
        echo "asset-mimetype=$asset_mimetype" >> $GITHUB_OUTPUT
        echo "asset-ext=$asset_ext" >> $GITHUB_OUTPUT
        echo "asset-basename=$asset_basename" >> $GITHUB_OUTPUT
